export class FFmpegManager{constructor(e){this.envMode=e,this.ffmpeg=null,this.isMultiThreaded=!1,this.previousProcessedVideoUrl=null,this.previousProcessedVideoUrl2=null,this.message=document.getElementById("message")}async initLoad(){let e=this.getPathObject();const{FFmpeg:t}=await import(e.ffmpeg),{fetchFile:i}=await import(e.utils);this.FFmpeg=t,this.fetchFile=i,await this.initializeFfmpeg()}getPathObject(){return{production:{ffmpeg:"/javascript/ffmpeg/ffmpeg/index.js",utils:"https://cdn.jsdelivr.net/npm/@ffmpeg/util@0.12.1/dist/esm/index.min.js",mtCore:"https://cdn.jsdelivr.net/npm/@ffmpeg/core-mt@0.12.4/dist/esm/ffmpeg-core.js",mtWasm:"https://cdn.jsdelivr.net/npm/@ffmpeg/core-mt@0.12.4/dist/esm/ffmpeg-core.wasm",mtWorker:"/javascript/ffmpeg/multi-thread/ffmpeg-core.worker.js",stCore:"https://cdn.jsdelivr.net/npm/@ffmpeg/core@0.12.4/dist/esm/ffmpeg-core.js"},development:{ffmpeg:"/javascript/ffmpeg/ffmpeg/index.js",utils:"/javascript/ffmpeg/utils/index.js",mtCore:"/javascript/ffmpeg/multi-thread/ffmpeg-core.js",mtWasm:"/javascript/ffmpeg/multi-thread/ffmpeg-core.wasm",mtWorker:"/javascript/ffmpeg/multi-thread/ffmpeg-core.worker.js",stCore:"/javascript/ffmpeg/core/ffmpeg-core.js"}}[this.envMode]}async initializeFfmpeg(){null===this.ffmpeg&&(this.ffmpeg=new this.FFmpeg,this.ffmpeg.on("log",(({message:e})=>{console.log(e)})),this.ffmpeg.on("progress",(({progress:e,time:t})=>{this.message.innerHTML=100*e+" %"})),this.isMultiThreaded?await this.loadMultiThreadFiles():await this.loadSingleThreadFiles())}async loadMultiThreadFiles(){console.log("multithreading engaged");const e=this.getPathObject();await this.ffmpeg.load({coreURL:e.mtCore,wasmURL:e.mtWasm,workerURL:e.mtWorker})}async loadSingleThreadFiles(){console.log("singlethreading engaged");const e=this.getPathObject();await this.ffmpeg.load({coreURL:e.stCore})}parseCommandString(e){const t=[];let i="",o=!1;for(let n=0;n<e.length;n++){const s=e.charAt(n);'"'===s?o=!o:" "!==s||o?i+=s:i&&(t.push(i),i="")}return i&&t.push(i),t}getCommands(e,t){return{conversion:`-i "${e.inputFileName}" "${e.outputFileName}"`,trim:`-ss "${e.start.time}" -i "${e.inputFileName}" -ss "${e.start.time}" -i "${e.inputFileName}" -t ${e.end.time} -map 0:v -map 1:a? -c:v copy -c:a copy "${e.outputFileName}"`,merge:`-f concat -safe 0 -i concat_list.txt -c:v copy -c:a copy "${e.outputFileName}"`,split:`-i "${e.inputFileName}" -t ${e.start.time} -c:v copy -c:a copy "${e.outputFileName}" -ss ${e.start.time} -c:v copy -c:a copy "${e.outputFileName2}"`,resize:`-i "${e.inputFileName}" -vf "scale=${e.size},setsar=1:1" ${e.outputFileName}`,removeaudio:`-i "${e.inputFileName}" -c:v copy -an "${e.outputFileName}"`,crop:`-i "${e.inputFileName}" -vf crop=${e.dimension} ${e.outputFileName}`,getaudio:`-i "${e.inputFileName}" "${e.outputFileName}"`,textoverlay:`-i "${e.inputFileName}" -vf drawtext="${e.drawtext}" ${e.outputFileName}`}[t]}async processVideo(e,t){switch(t){case"conversion":case"trim":case"split":case"removeaudio":case"resize":case"crop":case"getaudio":case"textoverlay":await this.ffmpeg.writeFile(e.inputFileName,await this.fetchFile(e.videoFile[0]));break;case"merge":const t=[];for(const i of e.videoFile){const{name:e}=i;await this.ffmpeg.writeFile(e,await this.fetchFile(i)),t.push(`file '${e}'`)}await this.ffmpeg.writeFile("concat_list.txt",t.join("\n"));break;default:return void console.error("path not found")}this.message.innerHTML="Start transcoding";const i=this.getCommands(e,t),o=this.parseCommandString(i);await this.ffmpeg.exec(o),this.message.innerHTML="Transcoding completed"}async generateOutput(e,t){const i=await this.ffmpeg.readFile(e.outputFileName),o=document.getElementById("output-video"),n=`video/${e.outputFileType}`,s=URL.createObjectURL(new Blob([i.buffer],{type:n}));o.src=s,this.previousProcessedVideoUrl&&URL.revokeObjectURL(this.previousProcessedVideoUrl),this.previousProcessedVideoUrl=s;const a=document.getElementById("downloadLink");if(a.href=s,a.download=e.outputFileName,a.style.display="block","split"===t){const t=await this.ffmpeg.readFile(e.outputFileName2),i=URL.createObjectURL(new Blob([t.buffer],{type:n}));this.previousProcessedVideoUrl2&&URL.revokeObjectURL(this.previousProcessedVideoUrl2),this.previousProcessedVideoUrl2=i;const o=document.getElementById("downloadLink2");o.href=i,o.download=e.outputFileName2,o.style.display="block"}o.classList.contains("hidden")&&o.classList.remove("hidden")}}export class VideoProcessor{constructor(e){if(this.ffmpegManager=new FFmpegManager(e),this.videoInput=document.getElementById("videoInput"),this.outputName=document.getElementById("outputName"),this.convertButton=document.getElementById("convertButton"),this.mode=document.getElementById("mode").textContent,this.videoInputPlayer=document.getElementById("input-video"),!(this.videoInput&&this.outputName&&this.convertButton&&this.mode))throw new Error("One or more required DOM elements are missing.");this.videoInput.addEventListener("change",(e=>{this.handleVideoInput(e)})),this.convertButton.addEventListener("click",(async()=>{try{await this.handleConvertButtonClick()}catch(e){document.getElementById("message").innerHTML="error occured",console.log(e)}})),this.ffmpegManager.initLoad()}handleVideoInput(e){const t=e.target.files[0];if(t){console.log("File selected:",t.name);var i=URL.createObjectURL(t);this.videoInputPlayer.src=i,this.videoInputPlayer.classList.contains("hidden")&&this.videoInputPlayer.classList.toggle("hidden")}else console.log("No file selected.")}async handleConvertButtonClick(){const e=document.getElementById("videoInput"),t=document.getElementById("mode").textContent,i=document.getElementById("outputName");if(console.log(t),!e||0===e.files.length)return void console.error("No video file selected.");if(!i.value)return i.scrollIntoView({behavior:"smooth",block:"center"}),void alert("Enter Name for Output file");e.files;var o={videoFile:e.files,inputFileName:"",outputFileN:i.value,outputFileType:"",outputFileName:"",outputFileName2:"",start:{hour:0,minute:0,second:0},end:{hour:0,minute:0,second:0},duration:"",size:"",dimension:"",audioinput:"",drawtext:""};switch(t){case"conversion":case"getaudio":o.outputFileType=document.getElementById("outputFormat").value,o.inputFileName=o.videoFile[0].name,o.outputFileName=`${o.outputFileN}.${o.outputFileType}`;break;case"trim":o.inputFileName=o.videoFile[0].name,o.outputFileType=o.inputFileName.split(".").pop(),o.outputFileName=`${o.outputFileN}.${o.outputFileType}`,o.start={hour:document.getElementById("start_hour").value,minute:document.getElementById("start_minute").value,second:document.getElementById("start_second").value},o.end={hour:document.getElementById("end_hour").value,minute:document.getElementById("end_minute").value,second:document.getElementById("end_second").value},o.start.time=`${o.start.hour}:${o.start.minute}:${o.start.second}`,o.end.time=`${o.start.hour}:${o.end.minute}:${o.end.second}`,o.end.time=this.calculateDuration(o.start.time,o.end.time);break;case"merge":console.log("merging - input"),o.videoFile=e.files,console.log(o.videoFile),o.inputFileName=o.videoFile[0].name,o.outputFileType=o.inputFileName.split(".").pop(),o.outputFileName=`${o.outputFileN}.${o.outputFileType}`;const t=o.inputFileName.split(".").pop();for(var n of o.videoFile)if(n.name.split(".").pop()!=t)return void alert("input files must be of the same type");break;case"split":o.inputFileName=o.videoFile[0].name,o.outputFileType=o.inputFileName.split(".").pop(),o.outputFileName=`${o.outputFileN}p1.${o.outputFileType}`,o.outputFileName2=`${o.outputFileN}p2.${o.outputFileType}`,o.start={hour:document.getElementById("start_hour").value,minute:document.getElementById("start_minute").value,second:document.getElementById("start_second").value},o.start.time=`${o.start.hour}:${o.start.minute}:${o.start.second}`,console.log(o);break;case"resize":o.inputFileName=o.videoFile[0].name,o.outputFileType=o.inputFileName.split(".").pop(),o.outputFileName=`${o.outputFileN}.${o.outputFileType}`,o.size=document.getElementById("dimension").value;break;case"removeaudio":o.inputFileName=o.videoFile[0].name,o.outputFileType=o.inputFileName.split(".").pop(),o.outputFileName=`${o.outputFileN}.${o.outputFileType}`;break;case"crop":document.body.innerHTML='\n            <input type="file" id="videoInput" />\n            <input type="text" id="outputName" />\n            <button id="convertButton"></button>\n            <span id="mode">conversion</span>\n            <div id="message"></div>\n            <video id="input-video" class="hidden"></video>\n          ',o.inputFileName=o.videoFile[0].name,o.outputFileType=o.inputFileName.split(".").pop(),o.outputFileName=`${o.outputFileN}.${o.outputFileType}`,o.dimension=`${document.getElementById("width").value}:${document.getElementById("height").value}:${document.getElementById("x").value}:${document.getElementById("y").value}`,console.log(o.dimension);break;case"textoverlay":o.inputFileName=o.videoFile[0].name,o.outputFileType=o.inputFileName.split(".").pop(),o.outputFileName=`${o.outputFileN}.${o.outputFileType}`,o.drawtext=`text='${document.getElementById("text").value}':x=${document.getElementById("x").value}:y=${document.getElementById("y").value}:fontsize=${document.getElementById("fontsize").value}`,console.log(` The created drawtext ${o.drawtext}`);break;default:return void console.log("path not found")}await this.ffmpegManager.processVideo(o,t),await this.ffmpegManager.generateOutput(o,t)}calculateDuration(e,t){const i=e.split(":").map(parseFloat),o=t.split(":").map(parseFloat),n=3600*i[0]+60*i[1]+i[2],s=3600*o[0]+60*o[1]+o[2];if(s<=n)throw new Error("End time must be greater than start time.");return s-n}}"undefined"!=typeof envMode?new VideoProcessor(envMode):new VideoProcessor("development");